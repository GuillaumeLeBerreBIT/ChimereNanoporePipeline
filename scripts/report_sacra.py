#!/usr/bin/python3

#######################################
# MODULES
#######################################
import os, argparse, re
from Bio import SeqIO   # pip install biopython
import numpy as np
#import seaborn as sns
import pandas as pd
import matplotlib.pyplot as plt     # pip install matplotlib
from scipy import stats         # pip install scipy

#######################################
# COMMAND LINE INPUT
#######################################

parser = argparse.ArgumentParser(description='Generate report')                                                         
parser.add_argument('prowlerFasta', type=str, help='Give the Fasta file generated by Prowler Trimmer.')
parser.add_argument('sacraChimere', type=str, help='Give the Fasta file containing the Chimeric reads split.')
parser.add_argument('sacraNonChimere', type=str, help='Give the Fasta file containing the non Chimere reads.')
args = parser.parse_args()

#######################################
# HANDLING FILE - INFORMATION
#######################################
# Defining empty lists beforehand
prow_records = []
chim_records = []
nonchim_records = []
# This list with gather the seq len from Non-Cimera and Chimera reads
sacra_seq_len = []

### PROWLER SEQUENCES
# Reading in the Prowler Fasta file
for seq_record in SeqIO.parse(args.prowlerFasta, "fasta"):
    # Append each record to a list
    prow_records.append(seq_record.id)
# Counting the number of IDs == Number of sequences
count_prow = len([record for record in prow_records])

### CHIMERA SEQUENCES
# Reading in the Fasta file with Chimere sequences
for seq_record in SeqIO.parse(args.sacraChimere, "fasta"):
    # Append each record to a list
    chim_records.append(seq_record.id)
    # Gathering the read lengths. 
    sacra_seq_len.append(len(seq_record.seq))
# Counting the number of IDs == Number of sequences
count_chim = len([record for record in chim_records])

### UNIQUE CHIMERA SEQUENCE ID
# Will try to count and see how many reads had one/multiple chimera reads
# Setting empty list beforehand
record_splitted = []
#Iterating over the already collected chimera sequence records
for chim in chim_records:
    # Split since each record hase the sequence pos start and end included.
    chim_splitted = chim.split(":")
    # Only retain the chimeric sequence IDs
    record_splitted.append(chim_splitted[0])
# Set an empty set to start
unique_chim = set()
# Iterate over the sequence IDs
for i in record_splitted:
    # Add to a set of IDs
    unique_chim.add(i)
# Counting the number of IDs == Number of UNIQUE sequences
count_unique_chim = len([record for record in unique_chim])

### NON CHIMERA SEQUENCES
# Reading in the Prowler Fasta file with Non Chimere reads
for seq_record in SeqIO.parse(args.sacraNonChimere, "fasta"):
    nonchim_records.append(seq_record.id)
    # Gathering the read lengths. 
    sacra_seq_len.append(len(seq_record.seq))
# Counting the number of IDs == Number of reads
count_nonchim = len([record for record in nonchim_records])

print(f"Reads after Prowler: {count_prow}\
      \nHow many chimera sequences: {count_chim}\
      \nHow many from original unique reads: {count_unique_chim}\
      \nHow many non chimera sequences: {count_nonchim}\
      \nSum chimera unique IDs & non chimera IDs: {(total_sacra_seq := count_unique_chim + count_nonchim)}")

#######################################
# VISUALIZATION
#######################################

### RAW RESULTS
# Creating a pandas dataframe. >> Parse to matplotlib
sacraDf = pd.DataFrame([["No. sequences", count_unique_chim, count_nonchim]],
                       columns = ["Amount", "Chimera sequences", "Non chimera sequences"])
#Plotting the rows  of the No. sequences per bar.
# Setting the width of the bars bit smaller. 
# Adding colormap for visualization. 
ax = sacraDf.plot(x='Amount', kind='bar', stacked=True, width = 0.2,
                colormap = "Set3",  
                title='Total amounft of chimera and non-chimera sequences after SACRA')
# Iterating over the patches to obtain the width and height
# Using the x, y coordinates to place it in the center of corresponding bar
for p in ax.patches:
    width, height = p.get_width(), p.get_height()
    x, y = p.get_xy() 
    # labelling text based on gathered positions. 
    ax.text(x+width/2, 
            y+height/2, 
            '{:.0f}'.format(height), 
            horizontalalignment='center', 
            verticalalignment='center')

# For some reason have to set the ticks to 0 to get the label horizontally. 
plt.xticks(rotation=0)
# Shrink current axis by 20%
box = ax.get_position()
ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
# Legend location to the upper right
# bbox anchor is to change the location, placed it outside the box, bbox_to_anchor(x,y)
plt.legend(loc = 'upper right', bbox_to_anchor=(1.4, 0.95))
# Label y-axis
plt.ylabel("No. of sequences")


plt.show()

### RELATIVE RESULTS
# Calculations
total_sacra_seq = count_unique_chim + count_nonchim
rel_unique_chim = (count_unique_chim / total_sacra_seq) * 100
rel_nonchim = (count_nonchim / total_sacra_seq) * 100
# Creating a pandas dataframe. >> Parse to matplotlib
sacraDf = pd.DataFrame([["No. sequences", rel_unique_chim, rel_nonchim]],
                       columns = ["Amount", "Chimera sequences", "Non chimera sequences"])
#Plotting the rows  of the No. sequences per bar.
# Setting the width of the bars bit smaller. 
# Adding colormap for visualization. 
ax = sacraDf.plot(x='Amount', kind='bar', stacked=True, width = 0.2,
                colormap = "Set3",  
                title='Total amounft of chimera and non-chimera sequences after SACRA')
# Iterating over the patches to obtain the width and height
# Using the x, y coordinates to place it in the center of corresponding bar
for p in ax.patches:
    width, height = p.get_width(), p.get_height()
    x, y = p.get_xy() 
    # labelling text based on gathered positions. 
    ax.text(x+width/2, 
            y+height/2, 
            '{:.2f} %'.format(height), 
            horizontalalignment='center', 
            verticalalignment='center')

# For some reason have to set the ticks to 0 to get the label horizontally. 
plt.xticks(rotation=0)
# Shrink current axis by 20%
box = ax.get_position()
ax.set_position([box.x0, box.y0, box.width * 0.8, box.height])
# Legend location to the upper right
# bbox anchor is to change the location, placed it outside the box, bbox_to_anchor(x,y)
plt.legend(loc = 'upper right', bbox_to_anchor=(1.4, 0.95))
# Label y-axis
plt.ylabel("No. of sequences")

#plt.savefig("reports/SACRA-Stacked-Seq-Rel-Amount.png", dpi=200)
plt.show()

### HISTOGRAM LENGTH READS
# Convert the read length lists to numpy arrays for plotting
sacra_array = np.array(sacra_seq_len)

# Plot a histogram of sequence lengths after SACRA
# Setting amount of bins, range of the graph, setting the density line to true.
plt.hist(sacra_array, bins=30, range = [min(sacra_array), 1000])
plt.title('Sequence lengths after SACRA')
plt.xlabel('Sequence length')
plt.ylabel('Frequency')

# From scipy can use to plot the lines
# Kernel density estimation is a way to estimate the probability density function (PDF)
#density = stats.gaussian_kde(sacra_array)
#Evenly spread between 0 and 1000 of 200 different values
#dens = np.linspace(min(sacra_array), 1000, 200)
#plt.plot(dens, density(dens), color='red', alpha = 0.5)

#plt.savefig("reports/SACRA-Hist-Distribution.png", dpi=200)
plt.show()
"""
labels = ["Reads after Prowler", "Chimere Reads", "Non-Chimere Reads"]
total_reads = [count_prow, count_chim, count_nonchim]

# Setting the margins
fig, ax = plt.subplots(figsize =(16, 9))
 
# Creating the horizontal bar plot
sns.barplot(x=total_reads, y=labels, ax=ax, palette="Blues_r")
#ax.barh(labels, total_reads)

# Add padding between axes and labels
ax.xaxis.set_tick_params(pad = 5)
ax.yaxis.set_tick_params(pad = 10)

# Adding the axis labels on to it. 
ax.set_xlabel("No. of Reads")
ax.set_title("No. of Reads before and after removing Chimere sequences")

# Adding the values on top of the barchart. 
for i, v in enumerate(total_reads):
    ax.text(v + 100, i, str(v), color='gray', fontweight='bold')


# Saving the picture 
plt.savefig("reports/SACRA-Results.png", dpi=200)

#Showing the plot
plt.show()
"""